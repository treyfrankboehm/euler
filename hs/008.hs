import Euler

-- Thanks, Haskell, for not making me manage memory or big ints!
bignum = listify

-- Get the product of the first n terms of a list
prodN :: Integral a => [a] -> a -> a
prodN [] n = 0     -- Product on an empty list is 0
prodN (x:xs) 1 = x -- Product of 1 term is just the first term
prodN (x:xs) n = x * prodN xs (n-1)

--prodN :: Integral a => a -> [a] -> a
--prodN n [] = 0     -- Product on an empty list is 0
--prodN 1 (x:xs) = x -- Product of 1 term is just the first term
--prodN n (x:xs) = x * prodN (n-1) xs

-- Return a list with product of terms 1..n, terms 2..n+1, etc
allProdN :: Integral a => [a] -> a -> [a]
allProdN [] n = []
allProdN (x:xs) n = [prodN (x:xs) n] ++ allProdN xs n

solution = maximum $ allProdN bignum 13

main = do print solution

